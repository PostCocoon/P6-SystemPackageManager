#!/usr/bin/env perl6
use v6;
use SystemPackageManager;
use Log::Any;
use Log::Any::Adapter::Stderr;
use Log::Any::Formatter;

class MyOwnFormatter is Log::Any::Formatter {
	method format( :$date-time!, :$msg!, :$category!, :$severity! ) {
    $severity //= "info";
    my $color = "0";
    my $colorBySeverity = {
      info => 32,
      error => 31,
      debug => 34,
    }

    $color [R//]= $colorBySeverity{$severity};

		return "\x1B[{$color}m" ~ '[' ~ $severity.lc ~ '] ' ~ $msg ~ "\x1B[0m";
	}
}

Log::Any.add( Log::Any::Adapter::Stderr.new, :formatter(MyOwnFormatter.new) );

sub MAIN(
		$action,
		*@items,
		Str :p(:$package-manager),
		*%options
	) {
	my $spm = SystemPackageManager.new;
	my $success = False;

	if defined $package-manager {
		$success = $spm.setup($package-manager, $package-manager ~~ "::");
	} else {
		$success = $spm.setup-for-this-system;
	}

	if ! $success {
		Log::Any.emergency('No suitable package manager found, can\'t continue');
		exit(1);
	}

	given $action {
		when 'sync' {
			if ! await $spm.sync(%options) {
				Log::Any.emergency('Failed to sync');
				exit(1);
			}
		}

		when 'install' {
			if ! @items.elems > 0 {
				Log::Any.emergency('No packages given to install');
				exit(1);
			}

			if ! await $spm.install(@items, %options) {
				Log::Any.emergency('Failed to install: ' ~ @items.join(', '));
				exit(1);
			}
		}

		when 'remove' {
			if ! @items.elems > 0 {
				Log::Any.emergency('No packages given to remove');
				exit(1);
			}

			if ! await $spm.remove(@items, %options) {
				Log::Any.emergency('Failed to remove: ' ~ @items.join(', '));
				exit(1);
			}
		}

		when 'is-installed' {
			if @items.elems != 1 {
				Log::Any.emergency('Can only check one package at the time');
				exit(1);
			}

			my $item = @items.first;
			if ! await $spm.is-installed($item, %options) {
				Log::Any.warning("$item is not installed");
				exit(1);
			} else {
				Log::Any.info("$item is installed");
			}
		}
	}
}
